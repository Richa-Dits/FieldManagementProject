// <auto-generated />
using System;
using FieldMgt.Core.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FieldMgt.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FieldMgt.Core.DomainModels.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(40)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Designation");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Lead", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LeadContact")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LeadDescription")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LeadSource")
                        .HasColumnType("int");

                    b.Property<int?>("LeadStage")
                        .HasColumnType("int");

                    b.Property<int>("LeadStatus")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("LeadId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Gender");

                    b.HasIndex("LeadSource");

                    b.HasIndex("LeadStage");

                    b.HasIndex("LeadStatus");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.LeadActivity", b =>
                {
                    b.Property<int>("LeadActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LeadActivityId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LeadId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Status");

                    b.ToTable("LeadActivity");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.LeadCall", b =>
                {
                    b.Property<int>("LeadCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalledBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CalledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LeadCallId");

                    b.HasIndex("CalledBy");

                    b.HasIndex("LeadId");

                    b.HasIndex("Status");

                    b.ToTable("LeadCall");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.LeadContact", b =>
                {
                    b.Property<int>("LeadContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(14)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("LeadContactID");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Gender");

                    b.HasIndex("LeadId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StateId");

                    b.ToTable("LeadContact");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDescription")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PocContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PocName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("SPLocationId")
                        .HasColumnType("int");

                    b.Property<string>("TeamLead")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LeadId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SPLocationId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IssueThreshold")
                        .HasColumnType("int");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<float>("QuantityAvailable")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductMasterId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.ProductMaster", b =>
                {
                    b.Property<int>("ProductMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ProductCreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.HasKey("ProductMasterId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ProductMaster");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReferenceCategory")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReferenceName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ReferenceId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.SPLocation", b =>
                {
                    b.Property<int>("SPLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("SPLocationIncharge")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SPLocationName")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("int");

                    b.HasKey("SPLocationId");

                    b.HasIndex("StakeholderId");

                    b.ToTable("SPLocation");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Stakeholder", b =>
                {
                    b.Property<int>("StakeholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("StakeholderName")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("StakeholderType")
                        .HasColumnType("int");

                    b.HasKey("StakeholderId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Stakeholder");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .HasColumnType("varchar(40)");

                    b.HasKey("StateID");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.StockIssue", b =>
                {
                    b.Property<int>("StockIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("QuantityIssued")
                        .HasColumnType("real");

                    b.HasKey("StockIssueId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrderId");

                    b.ToTable("StockIssue");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.UserAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("SPLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("StakeholderId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeadId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SPLocationId");

                    b.HasIndex("StakeholderId");

                    b.HasIndex("StateId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.UserContact", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AlternatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SPLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("StakeholderId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeadId");

                    b.HasIndex("SPLocationId");

                    b.HasIndex("StakeholderId");

                    b.ToTable("UserContact");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.City", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Employee", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "EmpCreatedBy")
                        .WithMany("Ref2Navigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("Created_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "EmpDeletedBy")
                        .WithMany("Ref4Navigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("Deleted_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "EmpDesignation")
                        .WithMany("Ref1Navigation")
                        .HasForeignKey("Designation")
                        .HasConstraintName("Designation_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "EmpModifiedBy")
                        .WithMany("Ref3Navigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("Modified_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "EmpUserID")
                        .WithMany("Ref1Navigation")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserId_FK");

                    b.Navigation("EmpCreatedBy");

                    b.Navigation("EmpDeletedBy");

                    b.Navigation("EmpDesignation");

                    b.Navigation("EmpModifiedBy");

                    b.Navigation("EmpUserID");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Lead", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadCreatedBy")
                        .WithMany("Ref5Navigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("LCreatedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadDeletedBy")
                        .WithMany("Ref7Navigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("LDeletedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefGender")
                        .WithMany("Lead3Navigation")
                        .HasForeignKey("Gender")
                        .HasConstraintName("LGender_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefSource")
                        .WithMany("Lead2Navigation")
                        .HasForeignKey("LeadSource")
                        .HasConstraintName("LeadSource_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefStatus")
                        .WithMany("Lead8Navigation")
                        .HasForeignKey("LeadStage")
                        .HasConstraintName("LeadStage_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefStage")
                        .WithMany("Lead1Navigation")
                        .HasForeignKey("LeadStatus")
                        .HasConstraintName("LeadStatus_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadModifiedBy")
                        .WithMany("Ref6Navigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("LModifiedBy_FK");

                    b.Navigation("LeadCreatedBy");

                    b.Navigation("LeadDeletedBy");

                    b.Navigation("LeadModifiedBy");

                    b.Navigation("RefGender");

                    b.Navigation("RefSource");

                    b.Navigation("RefStage");

                    b.Navigation("RefStatus");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.LeadActivity", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadActivityAssignedTo")
                        .WithMany("Ref13Navigation")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("LAAssignedTo_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadActivityCreatedBy")
                        .WithMany("Ref11Navigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("LACreatedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Lead", "RefLeadId")
                        .WithMany("Ref1LeadId")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("LALeadId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadActivityModifiedBy")
                        .WithMany("Ref12Navigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("LAModifiedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefLeadActivityStatus")
                        .WithMany("LeadActivity1Navigation")
                        .HasForeignKey("Status")
                        .HasConstraintName("LAStatus_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeadActivityAssignedTo");

                    b.Navigation("LeadActivityCreatedBy");

                    b.Navigation("LeadActivityModifiedBy");

                    b.Navigation("RefLeadActivityStatus");

                    b.Navigation("RefLeadId");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.LeadCall", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadCalledBy")
                        .WithMany("Ref14Navigation")
                        .HasForeignKey("CalledBy")
                        .HasConstraintName("LCCalledBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Lead", "RefCallLeadId")
                        .WithMany("Ref2LeadId")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("LCLeadId_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefLeadCallStatus")
                        .WithMany("LeadCall1Navigation")
                        .HasForeignKey("Status")
                        .HasConstraintName("LCStatus_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeadCalledBy");

                    b.Navigation("RefCallLeadId");

                    b.Navigation("RefLeadCallStatus");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.LeadContact", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadContactCreatedBy")
                        .WithMany("Ref8Navigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("LCCreatedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadContactDeletedBy")
                        .WithMany("Ref10Navigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("LCDeletedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "RefGender")
                        .WithMany("LeadContact1Navigation")
                        .HasForeignKey("Gender")
                        .HasConstraintName("LCGender_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "LeadContactModifiedBy")
                        .WithMany("Ref9Navigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("LCModifiedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Lead");

                    b.Navigation("LeadContactCreatedBy");

                    b.Navigation("LeadContactDeletedBy");

                    b.Navigation("LeadContactModifiedBy");

                    b.Navigation("RefGender");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Order", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "OrderAssignedTo")
                        .WithMany("Ref20Navigation")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("OrderAssignedTo_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "OrderCreatedBy")
                        .WithMany("Ref17Navigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("OrderCreatedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "OrderDeletedBy")
                        .WithMany("Ref19Navigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("OrderDeletedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "OrderModifiedBy")
                        .WithMany("Ref18Navigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("OrderModifiedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.HasOne("FieldMgt.Core.DomainModels.SPLocation", "SPLocation")
                        .WithMany()
                        .HasForeignKey("SPLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("OrderAssignedTo");

                    b.Navigation("OrderCreatedBy");

                    b.Navigation("OrderDeletedBy");

                    b.Navigation("OrderModifiedBy");

                    b.Navigation("Reference");

                    b.Navigation("SPLocation");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Product", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ProductMaster", "ProductMaster")
                        .WithMany()
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.ProductMaster", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.SPLocation", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.Stakeholder", "Stakeholder")
                        .WithMany()
                        .HasForeignKey("StakeholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stakeholder");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Stakeholder", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.State", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.StockIssue", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FieldMgt.Core.DomainModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.UserAddress", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMgt.Core.DomainModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("FieldMgt.Core.DomainModels.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("FieldMgt.Core.DomainModels.Reference", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.HasOne("FieldMgt.Core.DomainModels.SPLocation", "SPLocation")
                        .WithMany()
                        .HasForeignKey("SPLocationId");

                    b.HasOne("FieldMgt.Core.DomainModels.Stakeholder", "Stakeholder")
                        .WithMany()
                        .HasForeignKey("StakeholderId");

                    b.HasOne("FieldMgt.Core.DomainModels.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Employee");

                    b.Navigation("Lead");

                    b.Navigation("Reference");

                    b.Navigation("SPLocation");

                    b.Navigation("Stakeholder");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.UserContact", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("FieldMgt.Core.DomainModels.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("FieldMgt.Core.DomainModels.SPLocation", "SPLocation")
                        .WithMany()
                        .HasForeignKey("SPLocationId");

                    b.HasOne("FieldMgt.Core.DomainModels.Stakeholder", "Stakeholder")
                        .WithMany()
                        .HasForeignKey("StakeholderId");

                    b.Navigation("Employee");

                    b.Navigation("Lead");

                    b.Navigation("SPLocation");

                    b.Navigation("Stakeholder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.ApplicationUser", b =>
                {
                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "RefCreatedBy")
                        .WithMany("Ref16Navigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("UserCreatedBy_FK");

                    b.HasOne("FieldMgt.Core.DomainModels.ApplicationUser", "RefDeletedBy")
                        .WithMany("Ref15Navigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("UserDeletedBy_FK");

                    b.Navigation("RefCreatedBy");

                    b.Navigation("RefDeletedBy");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Lead", b =>
                {
                    b.Navigation("Ref1LeadId");

                    b.Navigation("Ref2LeadId");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.Reference", b =>
                {
                    b.Navigation("Lead1Navigation");

                    b.Navigation("Lead2Navigation");

                    b.Navigation("Lead3Navigation");

                    b.Navigation("Lead8Navigation");

                    b.Navigation("LeadActivity1Navigation");

                    b.Navigation("LeadCall1Navigation");

                    b.Navigation("LeadContact1Navigation");

                    b.Navigation("Ref1Navigation");
                });

            modelBuilder.Entity("FieldMgt.Core.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Ref10Navigation");

                    b.Navigation("Ref11Navigation");

                    b.Navigation("Ref12Navigation");

                    b.Navigation("Ref13Navigation");

                    b.Navigation("Ref14Navigation");

                    b.Navigation("Ref15Navigation");

                    b.Navigation("Ref16Navigation");

                    b.Navigation("Ref17Navigation");

                    b.Navigation("Ref18Navigation");

                    b.Navigation("Ref19Navigation");

                    b.Navigation("Ref1Navigation");

                    b.Navigation("Ref20Navigation");

                    b.Navigation("Ref2Navigation");

                    b.Navigation("Ref3Navigation");

                    b.Navigation("Ref4Navigation");

                    b.Navigation("Ref5Navigation");

                    b.Navigation("Ref6Navigation");

                    b.Navigation("Ref7Navigation");

                    b.Navigation("Ref8Navigation");

                    b.Navigation("Ref9Navigation");
                });
#pragma warning restore 612, 618
        }
    }
}
